import React, { useState, useEffect } from "react";
import { API_URL } from "../../api";

export default function DoctorsCrud() {
  const [doctors, setDoctors] = useState([]);
  const [departments, setDepartments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [editingDoctor, setEditingDoctor] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [showAddForm, setShowAddForm] = useState(false);
  const [selectedDepartment, setSelectedDepartment] = useState(null);

  useEffect(() => {
    fetchDoctors();
    fetchDepartments();
  }, []);

  const fetchDoctors = async () => {
    try {
      const response = await fetch(`${API_URL}/api/doctors`, {
        method: "GET",
        headers: {
          Authorization: `Bearer ${localStorage.getItem("accessToken")}`,
        },
        credentials: "include",
      });

      if (response.ok) {
        const data = await response.json();
        setDoctors(data);
      } else {
        console.error("Error fetching doctors");
      }
    } catch (err) {
      console.error("Error fetching doctors:", err);
    } finally {
      setLoading(false);
    }
  };

  const fetchDepartments = async () => {
    try {
      const response = await fetch(`${API_URL}/api/departments`, {
        method: "GET",
        headers: {
          Authorization: `Bearer ${localStorage.getItem("accessToken")}`,
        },
        credentials: "include",
      });

      if (response.ok) {
        const data = await response.json();
        setDepartments(data.data || []);
      } else {
        console.error("Error fetching departments");
      }
    } catch (err) {
      console.error("Error fetching departments:", err);
    }
  };

  const handleEdit = async (doctor) => {
    try {
      const response = await fetch(`${API_URL}/api/doctors/${doctor.id}`, {
        method: "GET",
        headers: {
          Authorization: `Bearer ${localStorage.getItem("accessToken")}`,
        },
        credentials: "include",
      });

      if (response.ok) {
        const fullDoctorData = await response.json();
        setEditingDoctor(fullDoctorData);
        setSelectedDepartment(fullDoctorData.department_id || null);
        setShowAddForm(false);
      } else {
        console.error("Error fetching doctor details");
      }
    } catch (err) {
      console.error("Error fetching doctor details:", err);
    }
  };

  const handleDelete = async (doctorId) => {
    if (!window.confirm("Are you sure you want to delete this doctor?")) return;
    
    try {
      const response = await fetch(`${API_URL}/api/doctors/${doctorId}`, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${localStorage.getItem("accessToken")}`,
        },
        credentials: "include",
      });

      if (response.ok) {
        alert("Doctor deleted successfully");
        fetchDoctors();
      } else {
        const errorData = await response.json();
        alert(errorData.error || "Error deleting doctor");
      }
    } catch (err) {
      console.error("Error deleting doctor:", err);
      alert("Error deleting doctor");
    }
  };

  const handleAdd = () => {
    setEditingDoctor(null);
    setSelectedDepartment(null);
    setShowAddForm(true);
  };

  const handleSave = async (e) => {
    e.preventDefault();
    
    try {
      const url = editingDoctor ? `${API_URL}/api/doctors/${editingDoctor.id}` : `${API_URL}/api/doctors`;
      const method = editingDoctor ? "PUT" : "POST";
      
      const response = await fetch(url, {
        method: method,
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${localStorage.getItem("accessToken")}`,
        },
        credentials: "include",
        body: JSON.stringify(editingDoctor),
      });

      if (response.ok) {
        alert(editingDoctor ? "Doctor updated successfully" : "Doctor added successfully");
        setEditingDoctor(null);
        setShowAddForm(false);
        fetchDoctors();
      } else {
        const errorData = await response.json();
        alert(errorData.error || "Error saving doctor");
      }
    } catch (err) {
      console.error("Error saving doctor:", err);
      alert("Error saving doctor");
    }
  };

  const handleFieldChange = (field, value) => {
    setEditingDoctor(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleDepartmentChange = (deptId) => {
    setSelectedDepartment(deptId);
    setEditingDoctor(prev => ({
      ...prev,
      department_id: deptId
    }));
  };

  const getAvailableSpecializations = () => {
    if (!selectedDepartment) return [];
    const dept = departments.find(d => d.id === selectedDepartment);
    return dept?.specializations || [];
  };

  const filteredDoctors = doctors.filter(doctor =>
    doctor.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    doctor.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    doctor.specialization?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  if (loading) {
    return (
      <div className="w-full max-w-full mx-0 space-y-8">
        <div className="h-32 animate-pulse rounded-xl bg-muted" />
      </div>
    );
  }

  return (
    <div className="w-full max-w-full mx-0 space-y-8">
      <div className="flex justify-between items-center mb-8">
        <div>
          <h2 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
            Doctors Management ({doctors.length})
          </h2>
          <p className="text-gray-600 dark:text-gray-400 mt-2">Manage all doctor profiles</p>
        </div>
        <button
          onClick={handleAdd}
          className="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white px-6 py-3 rounded-lg transition-all duration-300 font-semibold shadow-lg hover:shadow-xl transform hover:scale-105"
        >
          Add New Doctor
        </button>
      </div>

      {(showAddForm || editingDoctor) ? (
        <div className="bg-white/70 dark:bg-gray-800/70 backdrop-blur-md rounded-2xl shadow-xl border border-white/20 dark:border-gray-700/50 p-6">
          <div className="mb-6">
            <h3 className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
              {editingDoctor ? `Edit Doctor: ${editingDoctor.name}` : "Add New Doctor"}
            </h3>
          </div>
          
          <form onSubmit={handleSave} className="space-y-6">
            {/* Basic Information */}
            <div className="grid grid-cols-2 gap-4">
              <h4 className="col-span-2 text-lg font-semibold text-gray-700 dark:text-gray-300 border-b border-gray-200 dark:border-gray-600 pb-2">
                Basic Information
              </h4>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Name</label>
                <input
                  type="text"
                  value={editingDoctor?.name || ""}
                  onChange={(e) => handleFieldChange('name', e.target.value)}
                  className="w-full p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                  required
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Email</label>
                <input
                  type="email"
                  value={editingDoctor?.email || ""}
                  onChange={(e) => handleFieldChange('email', e.target.value)}
                  className="w-full p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                  required
                />
              </div>
              
              {!editingDoctor && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Password</label>
                  <input
                    type="password"
                    value={editingDoctor?.password || ""}
                    onChange={(e) => handleFieldChange('password', e.target.value)}
                    className="w-full p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                    required
                  />
                </div>
              )}
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Phone</label>
                <input
                  type="tel"
                  value={editingDoctor?.phone || ""}
                  onChange={(e) => handleFieldChange('phone', e.target.value)}
                  className="w-full p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                />
              </div>
            </div>

            {/* Professional Information */}
            <div className="grid grid-cols-2 gap-4">
              <h4 className="col-span-2 text-lg font-semibold text-gray-700 dark:text-gray-300 border-b border-gray-200 dark:border-gray-600 pb-2">
                Professional Information
              </h4>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Department *</label>
                <select
                  value={selectedDepartment || ""}
                  onChange={(e) => handleDepartmentChange(e.target.value ? parseInt(e.target.value) : null)}
                  className="w-full p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                  required
                >
                  <option value="">Select Department</option>
                  {departments.map((dept) => (
                    <option key={dept.id} value={dept.id}>
                      {dept.name}
                    </option>
                  ))}
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Specialization *</label>
                <select
                  value={editingDoctor?.specialization || ""}
                  onChange={(e) => handleFieldChange('specialization', e.target.value)}
                  className="w-full p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                  required
                  disabled={!selectedDepartment}
                >
                  <option value="">
                    {!selectedDepartment ? "Select Department First" : "Select Specialization"}
                  </option>
                  {getAvailableSpecializations().map((spec) => (
                    <option key={spec} value={spec}>
                      {spec}
                    </option>
                  ))}
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Degree</label>
                <input
                  type="text"
                  value={editingDoctor?.degree || ""}
                  onChange={(e) => handleFieldChange('degree', e.target.value)}
                  className="w-full p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">License Number</label>
                <input
                  type="text"
                  value={editingDoctor?.license_number || ""}
                  onChange={(e) => handleFieldChange('license_number', e.target.value)}
                  className="w-full p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Experience (Years)</label>
                <input
                  type="number"
                  min="0"
                  value={editingDoctor?.experience_years || ""}
                  onChange={(e) => handleFieldChange('experience_years', e.target.value)}
                  className="w-full p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Experience Details</label>
                <textarea
                  value={editingDoctor?.experience || ""}
                  onChange={(e) => handleFieldChange('experience', e.target.value)}
                  rows="3"
                  className="w-full p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                />
              </div>
            </div>

            {/* Financial Information */}
            <div className="grid grid-cols-2 gap-4">
              <h4 className="col-span-2 text-lg font-semibold text-gray-700 dark:text-gray-300 border-b border-gray-200 dark:border-gray-600 pb-2">
                Financial Information
              </h4>
              
              <div className="relative">
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Consultation Fee (€)</label>
                <span className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400">€</span>
                <input
                  type="number"
                  step="0.01"
                  value={editingDoctor?.consultation_fee || editingDoctor?.fees || ""}
                  onChange={(e) => handleFieldChange('consultation_fee', e.target.value)}
                  className="w-full pl-7 p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                />
              </div>
              
              <div className="flex items-center space-x-3">
                <input
                  type="checkbox"
                  checked={editingDoctor?.available || false}
                  onChange={(e) => handleFieldChange('available', e.target.checked)}
                  className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
                />
                <label className="text-sm font-medium text-gray-700 dark:text-gray-300">
                  Doctor is available for appointments
                </label>
              </div>
            </div>

            {/* Address Information */}
            <div className="grid grid-cols-2 gap-4">
              <h4 className="col-span-2 text-lg font-semibold text-gray-700 dark:text-gray-300 border-b border-gray-200 dark:border-gray-600 pb-2">
                Address Information
              </h4>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Address Line 1</label>
                <input
                  type="text"
                  value={editingDoctor?.address_line1 || ""}
                  onChange={(e) => handleFieldChange('address_line1', e.target.value)}
                  className="w-full p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Address Line 2</label>
                <input
                  type="text"
                  value={editingDoctor?.address_line2 || ""}
                  onChange={(e) => handleFieldChange('address_line2', e.target.value)}
                  className="w-full p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Country</label>
                <input
                  type="text"
                  value={editingDoctor?.country || ""}
                  onChange={(e) => handleFieldChange('country', e.target.value)}
                  className="w-full p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">City/State</label>
                <input
                  type="text"
                  value={editingDoctor?.city_state || ""}
                  onChange={(e) => handleFieldChange('city_state', e.target.value)}
                  className="w-full p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Postal Code</label>
                <input
                  type="text"
                  value={editingDoctor?.postal_code || ""}
                  onChange={(e) => handleFieldChange('postal_code', e.target.value)}
                  className="w-full p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                />
              </div>
            </div>

            {/* Social Media */}
            <div className="grid grid-cols-2 gap-4">
              <h4 className="col-span-2 text-lg font-semibold text-gray-700 dark:text-gray-300 border-b border-gray-200 dark:border-gray-600 pb-2">
                Social Media & Contact
              </h4>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Facebook</label>
                <input
                  type="url"
                  value={editingDoctor?.facebook || ""}
                  onChange={(e) => handleFieldChange('facebook', e.target.value)}
                  className="w-full p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">X (Twitter)</label>
                <input
                  type="url"
                  value={editingDoctor?.x || ""}
                  onChange={(e) => handleFieldChange('x', e.target.value)}
                  className="w-full p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">LinkedIn</label>
                <input
                  type="url"
                  value={editingDoctor?.linkedin || ""}
                  onChange={(e) => handleFieldChange('linkedin', e.target.value)}
                  className="w-full p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Instagram</label>
                <input
                  type="url"
                  value={editingDoctor?.instagram || ""}
                  onChange={(e) => handleFieldChange('instagram', e.target.value)}
                  className="w-full p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                />
              </div>
            </div>

            {/* About */}
            <div>
              <h4 className="text-lg font-semibold text-gray-700 dark:text-gray-300 border-b border-gray-200 dark:border-gray-600 pb-2 mb-4">
                About Doctor
              </h4>
              <textarea
                value={editingDoctor?.about || ""}
                onChange={(e) => handleFieldChange('about', e.target.value)}
                rows="4"
                className="w-full p-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                placeholder="About the doctor"
              />
            </div>

            {/* Action Buttons */}
            <div className="flex justify-end space-x-4">
              <button
                type="button"
                onClick={() => {
                  setEditingDoctor(null);
                  setShowAddForm(false);
                }}
                className="px-6 py-3 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
              >
                Cancel
              </button>
              <button
                type="submit"
                className="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white px-6 py-3 rounded-lg transition-all duration-300 font-semibold shadow-lg hover:shadow-xl transform hover:scale-105"
              >
                {editingDoctor ? "Update Doctor" : "Add Doctor"}
              </button>
            </div>
          </form>
        </div>
      ) : (
        <div className="bg-white/70 dark:bg-gray-800/70 backdrop-blur-md rounded-2xl shadow-xl border border-white/20 dark:border-gray-700/50 overflow-hidden">
          <div className="p-6 border-b border-white/20 dark:border-gray-700/50">
            <div className="flex items-center gap-4">
              <div className="flex-1">
                <input
                  type="text"
                  placeholder="Search doctors..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white"
                />
              </div>
            </div>
          </div>
          
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b border-gray-200 dark:border-gray-700">
                  <th className="text-left py-3 px-4 font-semibold text-gray-700 dark:text-gray-300">Name</th>
                  <th className="text-left py-3 px-4 font-semibold text-gray-700 dark:text-gray-300">Email</th>
                  <th className="text-left py-3 px-4 font-semibold text-gray-700 dark:text-gray-300">Phone</th>
                  <th className="text-left py-3 px-4 font-semibold text-gray-700 dark:text-gray-300">Specialization</th>
                  <th className="text-left py-3 px-4 font-semibold text-gray-700 dark:text-gray-300">Department</th>
                  <th className="text-left py-3 px-4 font-semibold text-gray-700 dark:text-gray-300">Experience</th>
                  <th className="text-left py-3 px-4 font-semibold text-gray-700 dark:text-gray-300">Fees</th>
                  <th className="text-left py-3 px-4 font-semibold text-gray-700 dark:text-gray-300">Available</th>
                  <th className="text-left py-3 px-4 font-semibold text-gray-700 dark:text-gray-300">Actions</th>
                </tr>
              </thead>
              <tbody>
                {filteredDoctors.map((doctor) => (
                  <tr key={doctor.id} className="border-b border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700/50">
                    <td className="py-3 px-4 text-gray-900 dark:text-gray-100">{doctor.name || "N/A"}</td>
                    <td className="py-3 px-4 text-gray-600 dark:text-gray-400">{doctor.email || "N/A"}</td>
                    <td className="py-3 px-4 text-gray-600 dark:text-gray-400">{doctor.phone || "N/A"}</td>
                    <td className="py-3 px-4 text-gray-600 dark:text-gray-400">{doctor.specialization || "N/A"}</td>
                    <td className="py-3 px-4 text-gray-600 dark:text-gray-400">{doctor.department || "N/A"}</td>
                    <td className="py-3 px-4 text-gray-600 dark:text-gray-400">{doctor.experience_years ? `${doctor.experience_years} years` : "N/A"}</td>
                    <td className="py-3 px-4 text-gray-600 dark:text-gray-400">€{doctor.consultation_fee || doctor.fees || "N/A"}</td>
                    <td className="py-3 px-4">
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                        doctor.available 
                          ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400'
                          : 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400'
                      }`}>
                        {doctor.available ? 'Available' : 'Not Available'}
                      </span>
                    </td>
                    <td className="py-3 px-4">
                      <div className="flex space-x-2">
                        <button
                          onClick={() => handleEdit(doctor)}
                          className="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 text-sm font-medium"
                        >
                          Edit
                        </button>
                        <button
                          onClick={() => handleDelete(doctor.id)}
                          className="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300 text-sm font-medium"
                        >
                          Delete
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
            {filteredDoctors.length === 0 && (
              <div className="text-center py-8 text-gray-500 dark:text-gray-400">
                {searchTerm ? "No doctors found matching your search." : "No doctors found. Add your first doctor to get started."}
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}
